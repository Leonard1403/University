     1                                  ; sa se citeasca 2 numere  a si b din fisier1.txt. 
     2                                  ; Sa se afiseze in fisierul 2 rezultatul operatiei a/b in fisier2.
     3                                  
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                                            
    14                                                            extern exit, fopen, fprintf, fclose, fscanf
    15                                  import exit msvcrt.dll
    16                                  import fopen msvcrt.dll
    17                                  import fprintf msvcrt.dll
    18                                  import fscanf msvcrt.dll
    19                                  import fclose msvcrt.dll
    20                                  
    21                                  
    22                                  ; our data is declared here (the variables needed by our program)
    23                                  segment data use32 class=data
    24                                      ; ...
    25                                  
    26 00000000 646563697469742E74-          fisier1 db "decitit.txt", 0   ; filename to be created
    26 00000009 787400             
    27 0000000C 64656166697361742E-          fisier2 db "deafisat.txt",0
    27 00000015 74787400           
    28 00000019 7700                         access_mode2 db "w", 0       ; file access mode:
    29 0000001B 7200                         access_mode1 db "r", 0       ; file access mode:
    30                                                                  ; w - creates an empty file for writing ; r - for reading
    31 0000001D FFFFFFFF                    descriptor1 dd -1       ; variable to hold the file descriptor for fisier1
    32 00000021 FFFFFFFF                    descriptor2 dd -1       ; ; variable to hold the file descriptor for fisier2
    33                                     
    34 00000025 00000000                    a dd 0
    35 00000029 00000000                    b dd 0
    36 0000002D 00000000                    cat dd 0
    37 00000031 00000000                   restul dd 0
    38                                     
    39 00000035 256400                     format_citire db '%d', 0
    40                                     
    41 00000038 2043656C6520646F75-        format_mesaj_afisare db ' Cele doua numere citite sunt a= %d si b=%d', 0
    41 00000041 61206E756D65726520-
    41 0000004A 636974697465207375-
    41 00000053 6E7420613D20256420-
    41 0000005C 736920623D256400   
    42 00000064 2052657A756C746174-        format_mesaj_afisare2 db ' Rezultatul operatiei %d / %d este: catul = %d si restul = %d', 0
    42 0000006D 756C206F7065726174-
    42 00000076 696569202564202F20-
    42 0000007F 256420657374653A20-
    42 00000088 636174756C203D2025-
    42 00000091 642073692072657374-
    42 0000009A 756C203D20256400   
    43 000000A2 0A00                       linie_noua db 10, 0
    44                                      
    45                                  
    46                                  ; our code starts here
    47                                  segment code use32 class=code
    48                                      start:
    49                                          ; ...
    50                                          ; call fopen() to open the file for reading
    51                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    52                                          ; eax = fopen(file_name, access_mode)
    53 00000000 68[1B000000]                    push dword access_mode1    
    54 00000005 68[00000000]                    push dword fisier1
    55 0000000A FF15[00000000]                  call [fopen]
    56 00000010 83C408                          add esp, 4*2                ; clean-up the stack
    57 00000013 A3[1D000000]                    mov [descriptor1], eax  ; store the file descriptor returned by fopen
    58                                          
    59                                          ; check if fopen() has successfully created the file (EAX != 0)
    60 00000018 83F800                          cmp eax, 0
    61 0000001B 0F84E8000000                    je final
    62                                          
    63                                          ; daca a reusit citirea:
    64                                          ;citire din fiser1 folosind fscanf        
    65                                          ; citire primul nr a din fisier
    66 00000021 68[25000000]                    push dword a
    67 00000026 68[35000000]                    push dword format_citire
    68 0000002B FF35[1D000000]                  push dword [descriptor1]
    69 00000031 FF15[00000000]                  call [fscanf]
    70 00000037 83C40C                          add esp, 4*3
    71                                          
    72                                          ; citire al doilea nr din fisier: b
    73 0000003A 68[29000000]                    push dword b 
    74 0000003F 68[35000000]                    push dword format_citire
    75 00000044 FF35[1D000000]                  push dword [descriptor1]
    76 0000004A FF15[00000000]                  call [fscanf]
    77 00000050 83C40C                          add esp, 4*3
    78                                          
    79                                          ; call fopen() to create the file
    80                                          ; fopen() will return a file descriptor in the EAX or 0 in case of error
    81                                          ; eax = fopen(file_name, access_mode)
    82 00000053 68[19000000]                    push dword access_mode2   
    83 00000058 68[0C000000]                    push dword fisier2
    84 0000005D FF15[00000000]                  call [fopen]
    85 00000063 83C408                          add esp, 4*2                ; clean-up the stack
    86                                  
    87 00000066 A3[21000000]                    mov [descriptor2], eax  ; store the file descriptor returned by fopen
    88                                          
    89                                          ; check if fopen() has successfully created the file (EAX != 0)
    90 0000006B 83F800                          cmp eax, 0
    91 0000006E 0F8495000000                    je final
    92                                          
    93                                          ;daca e totul ok, efectuam calculele
    94 00000074 A1[25000000]                    mov eax, [a]
    95 00000079 99                              cdq 
    96 0000007A F73D[29000000]                  idiv dword[b] 
    97 00000080 A3[2D000000]                    mov [cat], eax
    98 00000085 8915[31000000]                  mov [restul], edx
    99                                          
   100                                          
   101                                          ;afisare mesaj in fisier2
   102                                          
   103 0000008B FF35[29000000]                  push dword [b]
   104 00000091 FF35[25000000]                  push dword [a]
   105 00000097 68[38000000]                    push dword format_mesaj_afisare
   106 0000009C FF35[21000000]                  push dword [descriptor2]
   107 000000A2 FF15[00000000]                  call [fprintf]
   108 000000A8 83C410                          add esp, 4*4
   109                                  
   110                                          ;trecere pe linie noua
   111                                           
   112 000000AB 68[A2000000]                    push dword linie_noua
   113 000000B0 FF35[21000000]                  push dword [descriptor2]
   114 000000B6 FF15[00000000]                  call [fprintf]
   115 000000BC 83C408                          add esp, 4*2
   116                                          
   117                                  
   118                                         ; write the text to file using fprintf()
   119                                          ; fprintf(file_descriptor, text)
   120                                         
   121 000000BF FF35[31000000]                  push dword [restul]
   122 000000C5 FF35[2D000000]                  push dword [cat]
   123 000000CB FF35[29000000]                  push dword [b]
   124 000000D1 FF35[25000000]                  push dword [a]
   125 000000D7 68[64000000]                    push dword format_mesaj_afisare2
   126 000000DC FF35[21000000]                  push dword [descriptor2]
   127 000000E2 FF15[00000000]                  call [fprintf]
   128 000000E8 83C418                          add esp, 4*6
   129                                  
   130                                          ; call fclose() to close the file
   131                                          ; fclose(file_descriptor)
   132 000000EB FF35[21000000]                  push dword [descriptor2]
   133 000000F1 FF15[00000000]                  call [fclose]
   134 000000F7 83C404                          add esp, 4
   135                                          
   136 000000FA FF35[1D000000]                   push dword [descriptor1]
   137 00000100 FF15[00000000]                  call [fclose]
   138 00000106 83C404                          add esp, 4
   139                                  
   140                                  
   141                                        final:
   142                                  
   143                                      
   144                                          ; exit(0)
   145 00000109 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   146 0000010B FF15[00000000]                  call    [exit]       ; call exit to terminate the program

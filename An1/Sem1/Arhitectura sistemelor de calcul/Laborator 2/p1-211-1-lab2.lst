     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ; a byte
    15                                      ; b word
    16                                      ; c doubleword
    17                                      ; x quadword
    18                                      
    19                                      ; 1Ah + b - (c + 0100b - a) + 4 + x
    20                                      
    21                                      ; atribuire nume/etichete constantelor folosind DIRECTIVA EQU
    22                                      
    23                                      consth EQU 1Ah
    24                                      constb EQU 0100b
    25                                      constd EQU 4
    26                                      
    27 00000000 02                          a db   2
    28 00000001 0800                        b dw 8
    29 00000003 11000000                    c dd 17
    30 00000007 8877665544332211            X dq 1122334455667788h
    31                                      
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                          ; ...
    37                                          
    38                                          ; 1Ah + b - (c + 0100b - a) + 4
    39                                          
    40                                          ;1Ah + b 
    41 00000000 66B81A00                            mov ax, consth   ; sau mov ax, 1ah 
    42 00000004 660305[01000000]                    add ax, [b]   ; ax = 1Ah + b
    43                                          ; (c + 0100b - a)
    44                                              ; c + 0100b
    45 0000000B 8B1D[03000000]                          mov ebx, [c]
    46 00000011 83C304                                  add ebx, constb  ; ebx = c + 0100b
    47                                                    ; -a
    48                                                    ;ebx - a
    49                                                    ; doublword - byte
    50                                                    ; convert pe a de la byte la doubleword
    51 00000014 0FB60D[00000000]                          movzx ecx, byte[a]  ; ecx - a
    52 0000001B 29CB                                      sub ebx, ecx   ; ebx = (c + 0100b - a)
    53                                           
    54                                          ; 1Ah + b - (c + 0100b - a) + 4
    55                                             ; ax     - ebx 
    56                                             ;  word   - doubleword
    57                                             ;convertim word la doubleword
    58 0000001D 0FB7C0                             movzx EAX, ax   ; 1Ah + b in eax
    59                                             
    60 00000020 29D8                               sub EAX, EBX   ; eax = 1Ah + b - (c + 0100b - a)
    61 00000022 83C004                             add eax, 4  ; eax = 1Ah + b - (c + 0100b - a) +4
    62                                             
    63                                            ; ++++ + X quadword
    64                                            
    65                                            ; doubleword (eax) + 1 quadword
    66                                            ; extindem eax la quad edx:eax prin completetarea lui EDX cu val 0
    67 00000025 BA00000000                        mov edx, 0
    68                                            ; salvam pe X in ECX:EBX
    69 0000002A 8B0D[0B000000]                    mov ecx, dword[X+4]
    70 00000030 8B1D[07000000]                    mov ebx, dword[X+0]
    71                                            ; adunare de 
    72                                            ;edx:eax+
    73                                            ;ecx:ebx
    74                                            ; partea high in ecx si partea low in ebx
    75                                            
    76 00000036 01D8                              add eax, ebx
    77 00000038 11CA                    		  adc edx, ecx   ; adc- add with carry edx=edx+ecx+CF
    78                                            ; rez final in EDX:EAX
    79                                  
    80                                  
    81                                             
    82                                          
    83                                          
    84                                          
    85                                      
    86                                          ; exit(0)
    87 0000003A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    88 0000003C FF15[00000000]                  call    [exit]       ; call exit to terminate the program

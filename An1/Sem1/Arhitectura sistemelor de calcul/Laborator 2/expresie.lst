     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ; a byte
    15                                      ; b word
    16                                      ; c doubleword
    17                                      
    18                                      ; 1Ah + b - ( c + 0100b - a) + 4
    19                                      consth EQU 1Ah
    20                                      constb EQU 0100b
    21                                      constd EQU 4
    22                                      
    23 00000000 02                          a db 2
    24 00000001 0800                        b dw 8
    25 00000003 11000000                    c dd 17
    26 00000007 8877665544332211            x dq 1122334455667788h
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; ...
    32                                          
    33                                          ; 1Ah + b - (c + 0100b - a) + 4
    34                                          
    35                                          ;1Ah+b
    36                                          
    37 00000000 66B81A00                        mov ax, consth ; sau mov ax, 1ah
    38 00000004 660305[01000000]                add ax, [b] ; ax = 1ah + b
    39                                          
    40                                          ; (c + 0100b - a)
    41                                              
    42                                              ; c + 0100b
    43 0000000B 8B1D[03000000]                      mov ebx, [c]
    44 00000011 83C304                              add ebx, constb ; ebx = c + 0100b
    45                                              
    46                                              
    47                                              ; -a
    48                                              ;ebx - add
    49                                              ;doubleword - byte
    50                                              ;convertim pe a de la byte la doubleword 
    51                                              mov ecx, byte[a] ; ecx - a convertit
    51          ******************       error: mismatch in operand sizes
    52 00000014 29CB                                sub ebx, ecx ; ebx = (c + 0100b - a)
    53                                          
    54                                          
    55                                          
    56                                          
    57                                          ; 1Ah + b - (c + 0100b - a) + 4
    58                                          ;ax  -   ebx
    59                                          ;word-   doubleword
    60                                          ;convertim word la doubleword
    61 00000016 0FB7C0                          movzx EAX , ax ; 1Ah + b in eax
    62                                          
    63 00000019 29D8                            sub EAX , EBX ; eax = 1Ah + b - ( c + 0100b - a)
    64 0000001B 83C004                          add eax, 4 ; eax = 1Ah + b - ( c + 0100b -a ) + 4
    65                                          
    66                                          ; +++++ X quadword
    67                                          ; doubleword(eax) + 1 quadword
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          
    77                                          
    78                                          ; exit(0)
    79 0000001E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    80 00000020 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

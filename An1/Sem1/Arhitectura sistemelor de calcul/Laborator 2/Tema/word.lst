     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0100                        a dw 1
    14 00000002 0200                        b dw 2
    15 00000004 0300                        c dw 3
    16 00000006 0400                        d dw 4
    17                                      
    18                                      ; ...
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 66A1[04000000]                  MOV AX , [c]
    23                                          ;AX = c
    24 00000006 661305[02000000]                ADC AX , word[b]
    25                                          ;AX = (c+b)
    26 0000000D 661305[00000000]                ADC AX , word[a]
    27                                          ;AX = (c+b+a)
    28 00000014 668B1D[06000000]                MOV BX , [d]
    29 0000001B 66131D[06000000]                ADC BX , word[d]
    30                                          ;BX = (d+d)
    31 00000022 6619D8                          SBB AX , BX
    32                                          ; ...
    33                                      
    34                                          ; exit(0)
    35 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    36 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

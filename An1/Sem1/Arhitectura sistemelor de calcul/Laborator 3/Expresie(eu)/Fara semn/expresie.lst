     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 04                          a db 4
    15 00000001 05                          b db 5
    16 00000002 03                          c db 3
    17 00000003 01000000                    d dd 1
    18 00000007 0A00000000000000            e dq 10
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          
    24                                          
    25                                          
    26                                          
    27                                          
    28                                          ;b*c*100
    29 00000000 A0[01000000]                    mov al, [b]
    30 00000005 F625[02000000]                  mul byte [c] ; ax = b*c*100
    31 0000000B 66BB6400                        mov bx, 100
    32 0000000F 66F7E3                          mul bx ; dx:ax = b*c*100
    33                                          
    34                                          ; a byte -> double word in combinatii
    35                                          ;de reg cx:bx
    36                                          
    37 00000012 8A1D[00000000]                  mov bl, [a]
    38 00000018 B700                            mov bh, 0
    39 0000001A 66B90000                        mov cx, 0 ; cx:bx = a
    40                                          
    41                                          ; cx:bx + 
    42                                          ; dx:ax
    43                                          ;________ = 
    44                                          ; 1.bx + ax
    45                                          ; 2.cx + dx + posibilul transport
    46                                          
    47 0000001E 6601D8                          add ax, bx
    48 00000021 6611CA                          adc dx, cx ; dx:ax = (a+b*c*100)
    49                                          
    50                                          ; a + 10
    51 00000024 B30A                            mov bl, 10
    52 00000026 021D[00000000]                  add bl, [a] ; bl = a + 10
    53                                          
    54                                          ; dx:ax = (a+b*c*100)   / bl = a+10
    55                                          ; double word           / byte
    56                                          ; double word           / word
    57                                          
    58 0000002C B700                            mov bh, 0
    59                                          
    60 0000002E 66F7F3                          div bx ; dx:ax / bx = ax cat si in dx rest
    61                                          
    62                                          ; (a+b*c*100)/(a+10)+e-data
    63                                          ;                       ax +    e       -data
    64                                          ;                       word + quad     -double word
    65                                          
    66                                          ; ax -> quad word   -> edx:eax
    67                                          
    68 00000031 6689C3                          mov bx, ax
    69 00000034 B800000000                      mov eax , 0
    70 00000039 0FB7C3                          movzx eax, bx
    71 0000003C BA00000000                      mov edx, 0      ; edx:eax = (a+b*c*100)/(a+10)
    72                                  
    73                                          ; e din mem -> ecx:ebx
    74                                          
    75                                          ; presupunem ca e dq 1122334455667788h
    76                                          ; e in mem:         88   77  66   55  44  33  22  11
    77                                          ; adresele lui e:   e+0  e+1 e+2  3   4   5   6   e+7
    78                                          
    79 00000041 8B0D[0B000000]                  mov ecx,    dword[e+4] ;transfer 4 bytes ( 1 doubleword) cu incepere de la adresa lui e+4 in ecx
    80                                          ;ecx = 11223344
    81                                          
    82 00000047 8B1D[07000000]                  mov ebx,    dword[e+0] ;transfer 4 bytes ( 1 doubleword) cu incepere de la adresa lui e+0 in ebx
    83                                          ;ebx = 55667788
    84                                          
    85                                          ; edx:eax + 
    86                                          ; ecx:ebx
    87                                          ;_________= 
    88                                          ;adunare simpla eax , ebx
    89                                          ;adunare cu carry dintre edx, ecx
    90                                          
    91 0000004D 01D8                            add eax, ebx
    92 0000004F 11CA                            adc edx, ecx ; edx: eax
    93                                          
    94                                          ;edx:eax - data
    95                                          ;quad    - double
    96                                          ;d doubleword -> quadword
    97                                          ;d -> ecx:ebx
    98                                          
    99 00000051 8B1D[03000000]                  mov ebx, [d]
   100 00000057 B900000000                      mov ecx, 0
   101                                          
   102                                          ; edx:eax -
   103                                          ; ecx:ebx =
   104                                          ; scsadere simpla eax, ebx
   105                                          ; scadere cu imprumut dintre edx, ecx
   106                                          
   107 0000005C 29D8                            sub eax, ebx
   108 0000005E 19CA                            sbb edx, ecx    ;rez final in edx:eax
   109                                          
   110                                          
   111                                          
   112                                          
   113                                          
   114                                          
   115                                          
   116                                          
   117                                          
   118                                          ; exit(0)
   119 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   120 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

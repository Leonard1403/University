     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15                                      
    16                                      ; (a+b*c*100)/(a+10)+ e - d; a,b,c - byte;  d-doubleword;   e-quadword
    17                                      
    18                                      
    19 00000000 FC                          a db -4 
    20 00000001 FB                          b db -5
    21 00000002 FD                          c db -3
    22 00000003 FFFFFFFF                    d dd -1
    23 00000007 F6FFFFFFFFFFFFFF            e dq -10
    24                                      ;aux1 dw 0
    25                                      ;aux2 dw 0
    26                                      
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ;...
    32                                          
    33                                          
    34                                          ; b*c*100
    35 00000000 A0[01000000]                    mov al, [b]
    36 00000005 F62D[02000000]                  imul byte[c] ; ax = b*c*100
    37 0000000B 66BB6400                        mov bx, 100
    38 0000000F 66F7EB                          imul bx ; dx:ax = b*c*100
    39                                          
    40                                          ; a     +   dx:ax
    41                                          ;   byte+doubleword in comb de reg
    42                                          
    43                                          ;salvare DX:AX in CX:BX sau in variabile auxiliare
    44 00000012 6689D1                          mov cx, dx
    45 00000015 6689C3                          mov bx, ax      ;cx:bx = dx:ax = b*c*100
    46                                              ; sau cu variabile auxiliare
    47                                              ;mov [aux1], dx
    48                                              ;mov [aux2], ax
    49                                          
    50 00000018 A0[00000000]                    mov al, [a]
    51 0000001D 6698                            cbw
    52 0000001F 6699                            cwd     ; dx:ax = al
    53                                          
    54                                          ; dx:ax + 
    55                                          ; cx:bx
    56                                          
    57 00000021 6601D8                          add ax, bx
    58 00000024 6611CA                          adc dx, cx      ; dx:ax = (a+b*c*100)
    59                                          
    60                                          ; (a+10)
    61 00000027 8A1D[00000000]                  mov bl, [a]
    62 0000002D 80C30A                          add bl, 10
    63                                          
    64                                          ; (a+b*c*100)/(a+10)
    65                                          ; dx:ax      /bl
    66                                          ; dx:ax      /word
    67                                          
    68 00000030 660FBEDB                        movsx bx, bl
    69 00000034 66F7FB                          idiv bx     ; dx:ax / bx = ax - cat si in dx - rest
    70                                          ; ax = (a+b*c*100)/(a+10)
    71                                          
    72                                          ; (a+b*c*100)/(a+10) + e
    73                                          ;       ax           + e
    74                                          ;       word         + quad
    75                                          ; word ax as fie quad edx:eax
    76 00000037 98                              cwde
    77 00000038 99                              cdq
    78                                          ; transfer e in ecx:ebx
    79                                          
    80 00000039 8B1D[07000000]                  mov ebx, dword[e+0]
    81 0000003F 8B0D[0B000000]                  mov ecx, dword[e+4]
    82                                          
    83                                          ; edx:eax + 
    84                                          ; ecx:ebx
    85                                          
    86 00000045 01D8                            add eax, ebx
    87 00000047 11CA                            adc edx, ecx
    88                                          ; ecx:ebx = 
    89                                          ; (a+b*c*100)/(a+10)+e-d
    90                                          
    91                                          
    92                                          
    93                                          ; (a+b*c*100)/(a+10)+e-d
    94                                          ;              quad   - doubleword
    95                                          ; doubleword d trebuie sa fie quad
    96                                          
    97 00000049 A1[03000000]                    mov eax, [d]
    98 0000004E 99                              cdq  ; edx:eax = d
    99                                          
   100                                          ; ecx:ebx - 
   101                                          ; edx:eax
   102                                          
   103 0000004F 29C3                            sub ebx, eax
   104 00000051 19D1                            sbb ecx, edx
   105                                          ;rez final in ecx:edx
   106                                          
   107                                          
   108                                          
   109                                          
   110                                          ; exit(0)
   111 00000053 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   112 00000055 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
